elements<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_wider(trans)%>%
unnest_longer(concept)%>%
select(concept)%>%
unnest_wider(concept)%>% #optional 1st level unnesting if one level deeper is needed
unnest_longer(concept)%>%
select(concept,inherit)%>%
unnest_wider(concept,names_sep = '.')%>%
select(concept.shortName,inherit)%>%
unnest_longer(inherit)%>%
unnest_wider(inherit)
#Parse Questionnaire_New
#~Saves Questionnaire+ValueSet resources as json in R4json subfolder
#~Parses Questionnaire Json to flat csv + saves in R4csv subfolder
#~Updates Repo files
#~Logs and saves script instance under Questionnaire name
#Author: j.hendrikx@santeon.nl
#~remove all objects from the current workspace to start with a clean slate
rm(list = ls())
#Log start run####
rundate<-(paste("#Start of Analysis - System time ", Sys.time()))
#System config####
#install.packages("tidyverse")
#installed.packages("jsonlite")
#Load packages
library(tidyverse)
library(jsonlite)
library(stringr)
#Create generic functions
# Function to remove leading and trailing whitespace from all strings in a dataframe
trim_df <- function(df) {
# Apply trimws to all columns of the dataframe
df[] <- lapply(df, function(x) if(is.character(x)) trimws(x) else x)
return(df)
}
#set paths for different working stations
#Home
wdHomeTeams ="C:\\Users\\joshe\\Santeon\\PB IenI - General\\Development\\SIM\\SIM-on-FHIR\\"
wdHomeRepo ="C:\\Users\\joshe\\Repos\\sim-on-fhir\\BulkEport\\"
#Santeon laptop
wdLaptopTeams ="C:\\Users\\j.hendrikx\\Santeon\\PB IenI - General\\Development\\SIM\\"
wdLaptopRepo ="C:\\Users\\j.hendrikx\\Repos\\HipsETL\\"
#Santeon remote desktop
wdSRD ="S:\\VBHC\\VBHC-Centraal\\SIM\\"
wdSRDRepo="C:\\Users\\j.hendrikx\\Documents\\HipsETL\\"
# Input Parameters####
#~Set working directory paths#####
wd<-wdHomeRepo
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#~Set transaction url####
# FHIR transaction URL
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column FHIR >R4'
#urltrans<-"http://decor.nictiz.nl/fhir/4.0/sansa-/StructureDefinition/2.16.840.1.113883.2.4.3.11.60.909.4.41--20240320000000?_format=json"
#DECOR transaction url (non-FHIR)
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column Decor JSON'
urltrans2<-"http://decor.nictiz.nl/decor/services/RetrieveTransaction?id=2.16.840.1.113883.2.4.3.11.60.909.4.41&effectiveDate=2024-03-20T00%3A00%3A00&language=nl-NL&ui=nl-NL&format=json"
#DECOR transaction AD-API call####
trans<-read_json(paste0(urltrans2))
#~DECOR parse transaction for generating FHIR Bulk API Query####
#Get type filters (models/resources) in transaction###
types<- tryCatch({
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(trans.shortName)
}, error = function(e) {
message("Type (model/resource) filters not present", e$message)
return(NULL)
})
#join available types with ZIBtoFHIR conceptmap if present
if (!is.null(types) ) { #check if null or empty df due to filtering displays/groups
types <- types %>%
left_join(ZibToFHIRtypeMap, by = 'trans.shortName',suffix=c("",".drop"),copy=TRUE,relationship = 'one-to-one')%>%
select(-contains(".drop"))
} else {
message("error in mapping ZIB models to FHIR resources")
}
querytype<-paste0(types[["trans.type"]], collapse = ",")
query<-paste0("/Patient/$export?_type=",querytype,"&")
print(query)
#Save updated local files & remove object in R
writeLines(query,"exportquery.txt")
#Parse Questionnaire_New
#~Saves Questionnaire+ValueSet resources as json in R4json subfolder
#~Parses Questionnaire Json to flat csv + saves in R4csv subfolder
#~Updates Repo files
#~Logs and saves script instance under Questionnaire name
#Author: j.hendrikx@santeon.nl
#~remove all objects from the current workspace to start with a clean slate
rm(list = ls())
#Log start run####
rundate<-(paste("#Start of Analysis - System time ", Sys.time()))
#System config####
#install.packages("tidyverse")
#installed.packages("jsonlite")
#Load packages
library(tidyverse)
library(jsonlite)
library(stringr)
#Create generic functions
# Function to remove leading and trailing whitespace from all strings in a dataframe
trim_df <- function(df) {
# Apply trimws to all columns of the dataframe
df[] <- lapply(df, function(x) if(is.character(x)) trimws(x) else x)
return(df)
}
#set paths for different working stations
#Home
wdHomeTeams ="C:\\Users\\joshe\\Santeon\\PB IenI - General\\Development\\SIM\\SIM-on-FHIR\\"
wdHomeRepo ="C:\\Users\\joshe\\Repos\\sim-on-fhir\\BulkEport\\"
#Santeon laptop
wdLaptopTeams ="C:\\Users\\j.hendrikx\\Santeon\\PB IenI - General\\Development\\SIM\\"
wdLaptopRepo ="C:\\Users\\j.hendrikx\\Repos\\HipsETL\\"
#Santeon remote desktop
wdSRD ="S:\\VBHC\\VBHC-Centraal\\SIM\\"
wdSRDRepo="C:\\Users\\j.hendrikx\\Documents\\HipsETL\\"
# Input Parameters####
#~Set working directory paths#####
wd<-wdHomeRepo
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#~Set transaction url####
# FHIR transaction URL
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column FHIR >R4'
#urltrans<-"http://decor.nictiz.nl/fhir/4.0/sansa-/StructureDefinition/2.16.840.1.113883.2.4.3.11.60.909.4.41--20240320000000?_format=json"
#DECOR transaction url (non-FHIR)
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column Decor JSON'
urltrans2<-"http://decor.nictiz.nl/decor/services/RetrieveTransaction?id=2.16.840.1.113883.2.4.3.11.60.909.4.41&effectiveDate=2024-03-20T00%3A00%3A00&language=nl-NL&ui=nl-NL&format=json"
#DECOR transaction AD-API call####
trans<-read_json(paste0(urltrans2))
#~DECOR parse transaction for generating FHIR Bulk API Query####
#Get type filters (models/resources) in transaction###
types<- tryCatch({
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(trans.shortName)
}, error = function(e) {
message("Type (model/resource) filters not present", e$message)
return(NULL)
})
#join available types with ZIBtoFHIR conceptmap if present
if (!is.null(types) ) { #check if null or empty df due to filtering displays/groups
types <- types %>%
left_join(ZibToFHIRtypeMap, by = 'trans.shortName',suffix=c("",".drop"),copy=TRUE,relationship = 'one-to-one')%>%
select(-contains(".drop"))
} else {
message("error in mapping ZIB models to FHIR resources")
}
View(types)
#Parse Questionnaire_New
#~Saves Questionnaire+ValueSet resources as json in R4json subfolder
#~Parses Questionnaire Json to flat csv + saves in R4csv subfolder
#~Updates Repo files
#~Logs and saves script instance under Questionnaire name
#Author: j.hendrikx@santeon.nl
#~remove all objects from the current workspace to start with a clean slate
rm(list = ls())
#Log start run####
rundate<-(paste("#Start of Analysis - System time ", Sys.time()))
#System config####
#install.packages("tidyverse")
#installed.packages("jsonlite")
#Load packages
library(tidyverse)
library(jsonlite)
library(stringr)
#Create generic functions
# Function to remove leading and trailing whitespace from all strings in a dataframe
trim_df <- function(df) {
# Apply trimws to all columns of the dataframe
df[] <- lapply(df, function(x) if(is.character(x)) trimws(x) else x)
return(df)
}
#set paths for different working stations
#Home
wdHomeTeams ="C:\\Users\\joshe\\Santeon\\PB IenI - General\\Development\\SIM\\SIM-on-FHIR\\"
wdHomeRepo ="C:\\Users\\joshe\\Repos\\sim-on-fhir\\BulkEport\\"
#Santeon laptop
wdLaptopTeams ="C:\\Users\\j.hendrikx\\Santeon\\PB IenI - General\\Development\\SIM\\"
wdLaptopRepo ="C:\\Users\\j.hendrikx\\Repos\\HipsETL\\"
#Santeon remote desktop
wdSRD ="S:\\VBHC\\VBHC-Centraal\\SIM\\"
wdSRDRepo="C:\\Users\\j.hendrikx\\Documents\\HipsETL\\"
# Input Parameters####
#~Set working directory paths#####
wd<-wdHomeRepo
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#~Set transaction url####
# FHIR transaction URL
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column FHIR >R4'
#urltrans<-"http://decor.nictiz.nl/fhir/4.0/sansa-/StructureDefinition/2.16.840.1.113883.2.4.3.11.60.909.4.41--20240320000000?_format=json"
#DECOR transaction url (non-FHIR)
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column Decor JSON'
urltrans2<-"http://decor.nictiz.nl/decor/services/RetrieveTransaction?id=2.16.840.1.113883.2.4.3.11.60.909.4.41&effectiveDate=2024-03-20T00%3A00%3A00&language=nl-NL&ui=nl-NL&format=json"
#DECOR transaction AD-API call####
trans<-read_json(paste0(urltrans2))
#~DECOR parse transaction for generating FHIR Bulk API Query####
#Get type filters (models/resources) in transaction###
types<- tryCatch({
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(trans.shortName)
}, error = function(e) {
message("Type (model/resource) filters not present", e$message)
return(NULL)
})
#join available types with ZIBtoFHIR conceptmap if present
if (!is.null(types) ) { #check if null or empty df due to filtering displays/groups
types <- types %>%
left_join(ZibToFHIRtypeMap, by = 'trans.shortName',suffix=c("",".drop"),copy=TRUE,relationship = 'one-to-one')%>%
select(-contains(".drop"))
} else {
message("error in mapping ZIB models to FHIR resources")
}
querytype<-paste0(types[["trans.type"]], collapse = ",")
query<-paste0("/Patient/$export?_type=",querytype,"&")
print(query)
#join available types with ZIBtoFHIR conceptmap if present
if (!is.null(types) ) { #check if null or empty df due to filtering displays/groups
types <- types %>%
left_join(ZibToFHIRtypeMap, by = 'trans.shortName',suffix=c("",".drop"),copy=TRUE,relationship = 'one-to-one')%>%
distinct()%>%
select(-contains(".drop"))
} else {
message("error in mapping ZIB models to FHIR resources")
}
#Parse Questionnaire_New
#~Saves Questionnaire+ValueSet resources as json in R4json subfolder
#~Parses Questionnaire Json to flat csv + saves in R4csv subfolder
#~Updates Repo files
#~Logs and saves script instance under Questionnaire name
#Author: j.hendrikx@santeon.nl
#~remove all objects from the current workspace to start with a clean slate
rm(list = ls())
#Log start run####
rundate<-(paste("#Start of Analysis - System time ", Sys.time()))
#System config####
#install.packages("tidyverse")
#installed.packages("jsonlite")
#Load packages
library(tidyverse)
library(jsonlite)
library(stringr)
#Create generic functions
# Function to remove leading and trailing whitespace from all strings in a dataframe
trim_df <- function(df) {
# Apply trimws to all columns of the dataframe
df[] <- lapply(df, function(x) if(is.character(x)) trimws(x) else x)
return(df)
}
#set paths for different working stations
#Home
wdHomeTeams ="C:\\Users\\joshe\\Santeon\\PB IenI - General\\Development\\SIM\\SIM-on-FHIR\\"
wdHomeRepo ="C:\\Users\\joshe\\Repos\\sim-on-fhir\\BulkEport\\"
#Santeon laptop
wdLaptopTeams ="C:\\Users\\j.hendrikx\\Santeon\\PB IenI - General\\Development\\SIM\\"
wdLaptopRepo ="C:\\Users\\j.hendrikx\\Repos\\HipsETL\\"
#Santeon remote desktop
wdSRD ="S:\\VBHC\\VBHC-Centraal\\SIM\\"
wdSRDRepo="C:\\Users\\j.hendrikx\\Documents\\HipsETL\\"
# Input Parameters####
#~Set working directory paths#####
wd<-wdHomeRepo
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#~Set transaction url####
# FHIR transaction URL
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column FHIR >R4'
#urltrans<-"http://decor.nictiz.nl/fhir/4.0/sansa-/StructureDefinition/2.16.840.1.113883.2.4.3.11.60.909.4.41--20240320000000?_format=json"
#DECOR transaction url (non-FHIR)
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column Decor JSON'
urltrans2<-"http://decor.nictiz.nl/decor/services/RetrieveTransaction?id=2.16.840.1.113883.2.4.3.11.60.909.4.41&effectiveDate=2024-03-20T00%3A00%3A00&language=nl-NL&ui=nl-NL&format=json"
#DECOR transaction AD-API call####
trans<-read_json(paste0(urltrans2))
#~DECOR parse transaction for generating FHIR Bulk API Query####
#Get type filters (models/resources) in transaction###
types<- tryCatch({
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(trans.shortName)
}, error = function(e) {
message("Type (model/resource) filters not present", e$message)
return(NULL)
})
#join available types with ZIBtoFHIR conceptmap if present
if (!is.null(types) ) { #check if null or empty df due to filtering displays/groups
types <- types %>%
left_join(ZibToFHIRtypeMap, by = 'trans.shortName',suffix=c("",".drop"),copy=TRUE,relationship = 'one-to-one')%>%
distinct()%>%
select(-contains(".drop"))
} else {
message("error in mapping ZIB models to FHIR resources")
}
querytype<-paste0(types[["trans.type"]], collapse = ",")
query<-paste0("/Patient/$export?_type=",querytype,"&")
print(query)
View(types)
View(types)
#Parse Questionnaire_New
#~Saves Questionnaire+ValueSet resources as json in R4json subfolder
#~Parses Questionnaire Json to flat csv + saves in R4csv subfolder
#~Updates Repo files
#~Logs and saves script instance under Questionnaire name
#Author: j.hendrikx@santeon.nl
#~remove all objects from the current workspace to start with a clean slate
rm(list = ls())
#Log start run####
rundate<-(paste("#Start of Analysis - System time ", Sys.time()))
#System config####
#install.packages("tidyverse")
#installed.packages("jsonlite")
#Load packages
library(tidyverse)
library(jsonlite)
library(stringr)
#Create generic functions
# Function to remove leading and trailing whitespace from all strings in a dataframe
trim_df <- function(df) {
# Apply trimws to all columns of the dataframe
df[] <- lapply(df, function(x) if(is.character(x)) trimws(x) else x)
return(df)
}
#set paths for different working stations
#Home
wdHomeTeams ="C:\\Users\\joshe\\Santeon\\PB IenI - General\\Development\\SIM\\SIM-on-FHIR\\"
wdHomeRepo ="C:\\Users\\joshe\\Repos\\sim-on-fhir\\BulkEport\\"
#Santeon laptop
wdLaptopTeams ="C:\\Users\\j.hendrikx\\Santeon\\PB IenI - General\\Development\\SIM\\"
wdLaptopRepo ="C:\\Users\\j.hendrikx\\Repos\\HipsETL\\"
#Santeon remote desktop
wdSRD ="S:\\VBHC\\VBHC-Centraal\\SIM\\"
wdSRDRepo="C:\\Users\\j.hendrikx\\Documents\\HipsETL\\"
# Input Parameters####
#~Set working directory paths#####
wd<-wdHomeRepo
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#~Set transaction url####
# FHIR transaction URL
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column FHIR >R4'
#urltrans<-"http://decor.nictiz.nl/fhir/4.0/sansa-/StructureDefinition/2.16.840.1.113883.2.4.3.11.60.909.4.41--20240320000000?_format=json"
#DECOR transaction url (non-FHIR)
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column Decor JSON'
urltrans2<-"http://decor.nictiz.nl/decor/services/RetrieveTransaction?id=2.16.840.1.113883.2.4.3.11.60.909.4.41&effectiveDate=2024-03-20T00%3A00%3A00&language=nl-NL&ui=nl-NL&format=json"
#DECOR transaction AD-API call####
trans<-read_json(paste0(urltrans2))
#~DECOR parse transaction for generating FHIR Bulk API Query####
#Get type filters (models/resources) in transaction###
types<- tryCatch({
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(trans.shortName)
}, error = function(e) {
message("Type (model/resource) filters not present", e$message)
return(NULL)
})
#join available types with ZIBtoFHIR conceptmap if present
if (!is.null(types) ) { #check if null or empty df due to filtering displays/groups
types <- types %>%
left_join(ZibToFHIRtypeMap, by = 'trans.shortName',suffix=c("",".drop"),copy=TRUE,relationship = 'one-to-one')%>%
distinct(trans.type, .keep_all=TRUE)%>%
select(-contains(".drop"))
} else {
message("error in mapping ZIB models to FHIR resources")
}
View(types)
elements<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_wider(trans)%>%
unnest_longer(concept)%>%
select(concept)%>%
unnest_wider(concept)%>% #optional 1st level unnesting if one level deeper is needed
unnest_longer(concept)%>%
select(concept,inherit)%>%
unnest_wider(concept,names_sep = '.')%>%
select(concept.shortName,inherit)%>%
unnest_longer(inherit)%>%
unnest_wider(inherit)
View(elements)
elements<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_wider(trans)%>%
unnest_longer(concept)%>%
select(concept)%>%
unnest_wider(concept)%>% #optional 1st level unnesting if one level deeper is needed
unnest_longer(concept)%>%
select(concept,inherit)%>%
unnest_wider(concept,names_sep = '.')
View(elements)
elements<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_wider(trans)%>%
unnest_longer(concept)%>%
select(concept)%>%
unnest_wider(concept)%>% #optional 1st level unnesting if one level deeper is needed
unnest_longer(concept)%>%
select(concept,inherit)%>%
unnest_wider(concept,names_sep = '.')%>%
select(concept.shortName,inherit)
elements<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_wider(trans)%>%
unnest_longer(concept)%>%
select(concept)%>%
unnest_wider(concept)%>% #optional 1st level unnesting if one level deeper is needed
unnest_longer(concept)%>%
select(concept,inherit)%>%
unnest_wider(concept,names_sep = '.')%>%
select(concept.shortName,inherit)%>%
unnest_longer(inherit)
elements<-
trans|>
tibble()%>%
unnest_auto()
elements<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_wider(trans)%>%
unnest_longer(concept)%>%
select(concept)%>%
unnest_wider(concept)%>% #optional 1st level unnesting if one level deeper is needed
unnest_longer(concept)%>%
select(concept,inherit)%>%
unnest_wider(concept,names_sep = '.')%>%
select(concept.shortName,inherit)%>%
unnest_longer(inherit, keep_empty = TRUE)
elements<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_wider(trans)%>%
unnest_longer(concept)%>%
select(concept)%>%
unnest_wider(concept)%>% #optional 1st level unnesting if one level deeper is needed
unnest_longer(concept)%>%
select(concept,inherit)%>%
unnest_wider(concept,names_sep = '.')%>%
select(concept.shortName,inherit)%>%
unnest_longer(inherit, keep_empty = TRUE)%>%
unnest_wider(inherit, keep_empty=TRUE)
elements<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_wider(trans)%>%
unnest_longer(concept)%>%
select(concept)%>%
unnest_wider(concept)%>% #optional 1st level unnesting if one level deeper is needed
unnest_longer(concept)%>%
select(concept,inherit)%>%
unnest_wider(concept,names_sep = '.')%>%
select(concept.shortName,inherit)%>%
unnest_longer(inherit, keep_empty = TRUE)%>%
unnest_wider(inherit)
