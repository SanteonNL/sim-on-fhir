# Input Parameters####
#~Set working directory paths#####
wd<-wdHomeTeams
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("C:/Users/joshe/Santeon/PB IenI - General/Development/SIM/SIM-on-FHIR/ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#Parse Questionnaire_New
#~Saves Questionnaire+ValueSet resources as json in R4json subfolder
#~Parses Questionnaire Json to flat csv + saves in R4csv subfolder
#~Updates Repo files
#~Logs and saves script instance under Questionnaire name
#Author: j.hendrikx@santeon.nl
#~remove all objects from the current workspace to start with a clean slate
rm(list = ls())
#Log start run####
rundate<-(paste("#Start of Analysis - System time ", Sys.time()))
#System config####
#install.packages("tidyverse")
#installed.packages("jsonlite")
#Load packages
library(tidyverse)
library(jsonlite)
library(stringr)
#Create generic functions
# Function to remove leading and trailing whitespace from all strings in a dataframe
trim_df <- function(df) {
# Apply trimws to all columns of the dataframe
df[] <- lapply(df, function(x) if(is.character(x)) trimws(x) else x)
return(df)
}
#set paths for different working stations
#Home
wdHomeTeams ="C:\\Users\\joshe\\Santeon\\PB IenI - General\\Development\\SIM\\SIM-on-FHIR\\"
wdHomeRepo ="C:\\Users\\joshe\\Repos\\sim-on-fhir\\BulkEport\\"
#Santeon laptop
wdLaptopTeams ="C:\\Users\\j.hendrikx\\Santeon\\PB IenI - General\\Development\\SIM\\"
wdLaptopRepo ="C:\\Users\\j.hendrikx\\Repos\\HipsETL\\"
#Santeon remote desktop
wdSRD ="S:\\VBHC\\VBHC-Centraal\\SIM\\"
wdSRDRepo="C:\\Users\\j.vanderlinden\\Documents\\HipsETL\\"
# Input Parameters####
#~Set working directory paths#####
wd<-wdHomeTeams
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("C:/Users/joshe/Santeon/PB IenI - General/Development/SIM/SIM-on-FHIR/ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#Parse Questionnaire_New
#~Saves Questionnaire+ValueSet resources as json in R4json subfolder
#~Parses Questionnaire Json to flat csv + saves in R4csv subfolder
#~Updates Repo files
#~Logs and saves script instance under Questionnaire name
#Author: j.hendrikx@santeon.nl
#~remove all objects from the current workspace to start with a clean slate
rm(list = ls())
#Log start run####
rundate<-(paste("#Start of Analysis - System time ", Sys.time()))
#System config####
#install.packages("tidyverse")
#installed.packages("jsonlite")
#Load packages
library(tidyverse)
library(jsonlite)
library(stringr)
#Create generic functions
# Function to remove leading and trailing whitespace from all strings in a dataframe
trim_df <- function(df) {
# Apply trimws to all columns of the dataframe
df[] <- lapply(df, function(x) if(is.character(x)) trimws(x) else x)
return(df)
}
#set paths for different working stations
#Home
wdHomeTeams ="C:\\Users\\joshe\\Santeon\\PB IenI - General\\Development\\SIM\\SIM-on-FHIR\\"
wdHomeRepo ="C:\\Users\\joshe\\Repos\\sim-on-fhir\\BulkEport\\"
#Santeon laptop
wdLaptopTeams ="C:\\Users\\j.hendrikx\\Santeon\\PB IenI - General\\Development\\SIM\\"
wdLaptopRepo ="C:\\Users\\j.hendrikx\\Repos\\HipsETL\\"
#Santeon remote desktop
wdSRD ="S:\\VBHC\\VBHC-Centraal\\SIM\\"
wdSRDRepo="C:\\Users\\j.vanderlinden\\Documents\\HipsETL\\"
# Input Parameters####
#~Set working directory paths#####
wd<-wdHomeRepo
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("C:/Users/joshe/Santeon/PB IenI - General/Development/SIM/SIM-on-FHIR/ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#Parse Questionnaire_New
#~Saves Questionnaire+ValueSet resources as json in R4json subfolder
#~Parses Questionnaire Json to flat csv + saves in R4csv subfolder
#~Updates Repo files
#~Logs and saves script instance under Questionnaire name
#Author: j.hendrikx@santeon.nl
#~remove all objects from the current workspace to start with a clean slate
rm(list = ls())
#Log start run####
rundate<-(paste("#Start of Analysis - System time ", Sys.time()))
#System config####
#install.packages("tidyverse")
#installed.packages("jsonlite")
#Load packages
library(tidyverse)
library(jsonlite)
library(stringr)
#Create generic functions
# Function to remove leading and trailing whitespace from all strings in a dataframe
trim_df <- function(df) {
# Apply trimws to all columns of the dataframe
df[] <- lapply(df, function(x) if(is.character(x)) trimws(x) else x)
return(df)
}
#set paths for different working stations
#Home
wdHomeTeams ="C:\\Users\\joshe\\Santeon\\PB IenI - General\\Development\\SIM\\SIM-on-FHIR\\"
wdHomeRepo ="C:\\Users\\joshe\\Repos\\sim-on-fhir\\BulkEport\\"
#Santeon laptop
wdLaptopTeams ="C:\\Users\\j.hendrikx\\Santeon\\PB IenI - General\\Development\\SIM\\"
wdLaptopRepo ="C:\\Users\\j.hendrikx\\Repos\\HipsETL\\"
#Santeon remote desktop
wdSRD ="S:\\VBHC\\VBHC-Centraal\\SIM\\"
wdSRDRepo="C:\\Users\\j.hendrikx\\Documents\\HipsETL\\"
# Input Parameters####
#~Set working directory paths#####
wd<-wdHomeRepo
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("~/ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#Parse Questionnaire_New
#~Saves Questionnaire+ValueSet resources as json in R4json subfolder
#~Parses Questionnaire Json to flat csv + saves in R4csv subfolder
#~Updates Repo files
#~Logs and saves script instance under Questionnaire name
#Author: j.hendrikx@santeon.nl
#~remove all objects from the current workspace to start with a clean slate
rm(list = ls())
#Log start run####
rundate<-(paste("#Start of Analysis - System time ", Sys.time()))
#System config####
#install.packages("tidyverse")
#installed.packages("jsonlite")
#Load packages
library(tidyverse)
library(jsonlite)
library(stringr)
#Create generic functions
# Function to remove leading and trailing whitespace from all strings in a dataframe
trim_df <- function(df) {
# Apply trimws to all columns of the dataframe
df[] <- lapply(df, function(x) if(is.character(x)) trimws(x) else x)
return(df)
}
#set paths for different working stations
#Home
wdHomeTeams ="C:\\Users\\joshe\\Santeon\\PB IenI - General\\Development\\SIM\\SIM-on-FHIR\\"
wdHomeRepo ="C:\\Users\\joshe\\Repos\\sim-on-fhir\\BulkEport\\"
#Santeon laptop
wdLaptopTeams ="C:\\Users\\j.hendrikx\\Santeon\\PB IenI - General\\Development\\SIM\\"
wdLaptopRepo ="C:\\Users\\j.hendrikx\\Repos\\HipsETL\\"
#Santeon remote desktop
wdSRD ="S:\\VBHC\\VBHC-Centraal\\SIM\\"
wdSRDRepo="C:\\Users\\j.hendrikx\\Documents\\HipsETL\\"
# Input Parameters####
#~Set working directory paths#####
wd<-wdHomeRepo
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#~Set transaction url####
# FHIR transaction URL
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column FHIR >R4'
#urltrans<-"http://decor.nictiz.nl/fhir/4.0/sansa-/StructureDefinition/2.16.840.1.113883.2.4.3.11.60.909.4.41--20240320000000?_format=json"
#DECOR transaction url (non-FHIR) as backup if FHIR export is down
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column Decor JSON'
urltrans2<-"http://decor.nictiz.nl/decor/services/RetrieveTransaction?id=2.16.840.1.113883.2.4.3.11.60.909.4.41&effectiveDate=2024-03-20T00%3A00%3A00&language=nl-NL&ui=nl-NL&format=json"
#DECOR transaction AD-API call####
trans<-read_json(paste0(urltrans2))
#~DECOR parse transaction for generating FHIR Bulk API Query####
#Get types###
types<- tryCatch({
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(trans.shortName)
}, error = function(e) {
message("Top level nested valuesets not present", e$message)
return(NULL)
})
#join available types with conceptmap if present
if (!is.null(types) ) { #check if null or empty df due to filtering displays/groups
types <- types %>%
left_join(ZibToFHIRtypeMap, by = 'trans.shortName',suffix=c("",".drop"),copy=TRUE,relationship = 'one-to-one')%>%
select(-contains(".drop"))
} else {
message("Skipping Qtrans join: AnswerLists not present.")
}
querytype<-paste0(types[["trans.type"]], collapse = ",")
query<-paste0("/Patient/$export?_type=",querytype,"&")
print(query)
#Save updated local files & remove object in R
writeLines(query,"exportquery.txt")
typeFilter<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(-trans.id:-trans.iddisplay,-trans.implementation:-trans.terminologyAssociation)%>%
unnest_longer(trans.concept)%>% #element level
unnest_wider(trans.concept)%>%
select(-iddisplay,-implementation,-name,-desc,-valueDomain,-relationship,-operationalization,-terminologyAssociation,-identifierAssociation)%>%
unnest_wider(context,names_sep = ".")%>% #wider to extract context and keep records without context
unnest_wider(context.1)%>% #wider to extract context and keep records without context
select(-language)%>%
rename(filterValueset='#text')%>%
unnest_wider(inherit,names_sep = ".")%>% #add ZIB reference
unnest_wider(inherit.1,names_sep = ".")%>%
select(-inherit.1.ref:-inherit.1.iEffectiveDate)%>% #remove additional reference metadata
rename(zibElement=inherit.1.refdisplay)%>%
select(-valueSet,-concept)
View(typeFilter)
#Parse Questionnaire_New
#~Saves Questionnaire+ValueSet resources as json in R4json subfolder
#~Parses Questionnaire Json to flat csv + saves in R4csv subfolder
#~Updates Repo files
#~Logs and saves script instance under Questionnaire name
#Author: j.hendrikx@santeon.nl
#~remove all objects from the current workspace to start with a clean slate
rm(list = ls())
#Log start run####
rundate<-(paste("#Start of Analysis - System time ", Sys.time()))
#System config####
#install.packages("tidyverse")
#installed.packages("jsonlite")
#Load packages
library(tidyverse)
library(jsonlite)
library(stringr)
#Create generic functions
# Function to remove leading and trailing whitespace from all strings in a dataframe
trim_df <- function(df) {
# Apply trimws to all columns of the dataframe
df[] <- lapply(df, function(x) if(is.character(x)) trimws(x) else x)
return(df)
}
#set paths for different working stations
#Home
wdHomeTeams ="C:\\Users\\joshe\\Santeon\\PB IenI - General\\Development\\SIM\\SIM-on-FHIR\\"
wdHomeRepo ="C:\\Users\\joshe\\Repos\\sim-on-fhir\\BulkEport\\"
#Santeon laptop
wdLaptopTeams ="C:\\Users\\j.hendrikx\\Santeon\\PB IenI - General\\Development\\SIM\\"
wdLaptopRepo ="C:\\Users\\j.hendrikx\\Repos\\HipsETL\\"
#Santeon remote desktop
wdSRD ="S:\\VBHC\\VBHC-Centraal\\SIM\\"
wdSRDRepo="C:\\Users\\j.hendrikx\\Repos\\SIM-on-FHIR\\sim-on-fhir\\BulkEport\\"
# Input Parameters####
#~Set working directory paths#####
wd<-wdSRDRepo
setwd(wd)
#Load ConceptMaps
library(readr)
ZibToFHIRtypeMap <- read_delim("ZibToFHIRtypeMap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#~Set transaction url####
# FHIR transaction URL
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column FHIR >R4'
#urltrans<-"http://decor.nictiz.nl/fhir/4.0/sansa-/StructureDefinition/2.16.840.1.113883.2.4.3.11.60.909.4.41--20240320000000?_format=json"
#DECOR transaction url (non-FHIR) as backup if FHIR export is down
#copy link from https://decor.nictiz.nl/ad/#/san-gen-/project/project-index/transactions ' Column Decor JSON'
urltrans2<-"http://decor.nictiz.nl/decor/services/RetrieveTransaction?id=2.16.840.1.113883.2.4.3.11.60.909.4.41&effectiveDate=2024-03-20T00%3A00%3A00&language=nl-NL&ui=nl-NL&format=json"
#DECOR transaction AD-API call####
trans<-read_json(paste0(urltrans2))
#~DECOR parse transaction for generating FHIR Bulk API Query####
#Get types###
types<- tryCatch({
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(trans.shortName)
}, error = function(e) {
message("Top level nested valuesets not present", e$message)
return(NULL)
})
#join available types with conceptmap if present
if (!is.null(types) ) { #check if null or empty df due to filtering displays/groups
types <- types %>%
left_join(ZibToFHIRtypeMap, by = 'trans.shortName',suffix=c("",".drop"),copy=TRUE,relationship = 'one-to-one')%>%
select(-contains(".drop"))
} else {
message("Skipping Qtrans join: AnswerLists not present.")
}
querytype<-paste0(types[["trans.type"]], collapse = ",")
query<-paste0("/Patient/$export?_type=",querytype,"&")
print(query)
#Save updated local files & remove object in R
writeLines(query,"exportquery.txt")
typeFilter<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(-trans.id:-trans.iddisplay,-trans.implementation:-trans.terminologyAssociation)%>%
unnest_longer(trans.concept)%>% #element level
unnest_wider(trans.concept)%>%
select(-iddisplay,-implementation,-name,-desc,-valueDomain,-relationship,-operationalization,-terminologyAssociation,-identifierAssociation)%>%
unnest_wider(context,names_sep = ".")%>% #wider to extract context and keep records without context
unnest_wider(context.1)%>% #wider to extract context and keep records without context
select(-language)%>%
rename(filterValueset='#text')%>%
unnest_wider(inherit,names_sep = ".")%>% #add ZIB reference
unnest_wider(inherit.1,names_sep = ".")%>%
select(-inherit.1.ref:-inherit.1.iEffectiveDate)%>% #remove additional reference metadata
rename(zibElement=inherit.1.refdisplay)%>%
select(-valueSet,-concept)%>%
mutate(extracted_string = if_else(!is.na(filterValueset), regmatches(filterValueset, regexpr("(?<=vs::)[^\\/]+", filterValueset, perl=TRUE)), NA),
extracted_datetime = if_else(!is.na(filterValueset), regmatches(filterValueset, regexpr("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}", filterValueset)), NA))
typeFilter<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(-trans.id:-trans.iddisplay,-trans.implementation:-trans.terminologyAssociation)%>%
unnest_longer(trans.concept)%>% #element level
unnest_wider(trans.concept)%>%
select(-iddisplay,-implementation,-name,-desc,-valueDomain,-relationship,-operationalization,-terminologyAssociation,-identifierAssociation)%>%
unnest_wider(context,names_sep = ".")%>% #wider to extract context and keep records without context
unnest_wider(context.1)%>% #wider to extract context and keep records without context
select(-language)%>%
rename(filterValueset='#text')%>%
unnest_wider(inherit,names_sep = ".")%>% #add ZIB reference
unnest_wider(inherit.1,names_sep = ".")%>%
select(-inherit.1.ref:-inherit.1.iEffectiveDate)%>% #remove additional reference metadata
rename(zibElement=inherit.1.refdisplay)%>%
select(-valueSet,-concept)
print(typeFilter$filterValueset)
typeFilter<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(-trans.id:-trans.iddisplay,-trans.implementation:-trans.terminologyAssociation)%>%
unnest_longer(trans.concept)%>% #element level
unnest_wider(trans.concept)%>%
select(-iddisplay,-implementation,-name,-desc,-valueDomain,-relationship,-operationalization,-terminologyAssociation,-identifierAssociation)%>%
unnest_wider(context,names_sep = ".")%>% #wider to extract context and keep records without context
unnest_wider(context.1)%>% #wider to extract context and keep records without context
select(-language)%>%
rename(filterValueset='#text')%>%
unnest_wider(inherit,names_sep = ".")%>% #add ZIB reference
unnest_wider(inherit.1,names_sep = ".")%>%
select(-inherit.1.ref:-inherit.1.iEffectiveDate)%>% #remove additional reference metadata
rename(zibElement=inherit.1.refdisplay)%>%
select(-valueSet,-concept)%>%
mutate(filterValueset = str_extract(filterValueset, '(?<=href=\\"vs::).*(?=\\" class=)'))
View(typeFilter)
typeFilter<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(-trans.id:-trans.iddisplay,-trans.implementation:-trans.terminologyAssociation)%>%
unnest_longer(trans.concept)%>% #element level
unnest_wider(trans.concept)%>%
select(-iddisplay,-implementation,-name,-desc,-valueDomain,-relationship,-operationalization,-terminologyAssociation,-identifierAssociation)%>%
unnest_wider(context,names_sep = ".")%>% #wider to extract context and keep records without context
unnest_wider(context.1)%>% #wider to extract context and keep records without context
select(-language)%>%
rename(filterValueset='#text')%>%
unnest_wider(inherit,names_sep = ".")%>% #add ZIB reference
unnest_wider(inherit.1,names_sep = ".")%>%
select(-inherit.1.ref:-inherit.1.iEffectiveDate)%>% #remove additional reference metadata
rename(zibElement=inherit.1.refdisplay)%>%
select(-valueSet,-concept)%>%
mutate(filterValueset = str_extract(filterValueset, '(?<=href=\\"vs::).*(?=\\" class=)'))%> %>%
typeFilter<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(-trans.id:-trans.iddisplay,-trans.implementation:-trans.terminologyAssociation)%>%
unnest_longer(trans.concept)%>% #element level
unnest_wider(trans.concept)%>%
select(-iddisplay,-implementation,-name,-desc,-valueDomain,-relationship,-operationalization,-terminologyAssociation,-identifierAssociation)%>%
unnest_wider(context,names_sep = ".")%>% #wider to extract context and keep records without context
unnest_wider(context.1)%>% #wider to extract context and keep records without context
select(-language)%>%
rename(filterValueset='#text')%>%
unnest_wider(inherit,names_sep = ".")%>% #add ZIB reference
unnest_wider(inherit.1,names_sep = ".")%>%
select(-inherit.1.ref:-inherit.1.iEffectiveDate)%>% #remove additional reference metadata
rename(zibElement=inherit.1.refdisplay)%>%
select(-valueSet,-concept)%>%
mutate(filterValueset = str_extract(filterValueset, '(?<=href=\\"vs::).*(?=\\" class=)'))%>%
mutate(filterValueset = gsub("/", "--", filterValueset)) %>%
mutate(filterValueset = gsub(":", "", filterValueset))
View(typeFilter)
typeFilter<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(-trans.id:-trans.iddisplay,-trans.implementation:-trans.terminologyAssociation)%>%
unnest_longer(trans.concept)%>% #element level
unnest_wider(trans.concept)%>%
select(-iddisplay,-implementation,-name,-desc,-valueDomain,-relationship,-operationalization,-terminologyAssociation,-identifierAssociation)%>%
unnest_wider(context,names_sep = ".")%>% #wider to extract context and keep records without context
unnest_wider(context.1)%>% #wider to extract context and keep records without context
select(-language)%>%
rename(filterValueset='#text')%>%
unnest_wider(inherit,names_sep = ".")%>% #add ZIB reference
unnest_wider(inherit.1,names_sep = ".")%>%
select(-inherit.1.ref:-inherit.1.iEffectiveDate)%>% #remove additional reference metadata
rename(zibElement=inherit.1.refdisplay)%>%
select(-valueSet,-concept)%>%
mutate(filterValueset = str_extract(filterValueset, '(?<=href=\\"vs::).*(?=\\" class=)'))%>%
mutate(filterValueset = gsub(":,T,-", "", filterValueset))%>%
mutate(filterValueset = gsub("/", "--", filterValueset))
typeFilter<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(-trans.id:-trans.iddisplay,-trans.implementation:-trans.terminologyAssociation)%>%
unnest_longer(trans.concept)%>% #element level
unnest_wider(trans.concept)%>%
select(-iddisplay,-implementation,-name,-desc,-valueDomain,-relationship,-operationalization,-terminologyAssociation,-identifierAssociation)%>%
unnest_wider(context,names_sep = ".")%>% #wider to extract context and keep records without context
unnest_wider(context.1)%>% #wider to extract context and keep records without context
select(-language)%>%
rename(filterValueset='#text')%>%
unnest_wider(inherit,names_sep = ".")%>% #add ZIB reference
unnest_wider(inherit.1,names_sep = ".")%>%
select(-inherit.1.ref:-inherit.1.iEffectiveDate)%>% #remove additional reference metadata
rename(zibElement=inherit.1.refdisplay)%>%
select(-valueSet,-concept)%>%
mutate(filterValueset = str_extract(filterValueset, '(?<=href=\\"vs::).*(?=\\" class=)'))%>%
mutate(filterValueset = gsub("[-T:]", "", filterValueset))%>%
mutate(filterValueset = gsub("/", "--", filterValueset))
typeFilter<-
trans|>
tibble()%>%
unnest_longer(trans)%>%
unnest_longer(trans)%>%
select(trans)%>%
filter(row_number()==length(trans))%>%
unnest_longer(trans)%>%
unnest_wider(trans, names_sep = ".")%>% #model/type level
select(-trans.id:-trans.iddisplay,-trans.implementation:-trans.terminologyAssociation)%>%
unnest_longer(trans.concept)%>% #element level
unnest_wider(trans.concept)%>%
select(-iddisplay,-implementation,-name,-desc,-valueDomain,-relationship,-operationalization,-terminologyAssociation,-identifierAssociation)%>%
unnest_wider(context,names_sep = ".")%>% #wider to extract context and keep records without context
unnest_wider(context.1)%>% #wider to extract context and keep records without context
select(-language)%>%
rename(filterValueset='#text')%>%
unnest_wider(inherit,names_sep = ".")%>% #add ZIB reference
unnest_wider(inherit.1,names_sep = ".")%>%
select(-inherit.1.ref:-inherit.1.iEffectiveDate)%>% #remove additional reference metadata
rename(zibElement=inherit.1.refdisplay)%>%
select(-valueSet,-concept)%>%
mutate(filterValueset = str_extract(filterValueset, '(?<=href=\\"vs::).*(?=\\" class=)'))%>%
mutate(filterValueset = across(filterValueset, ~ gsub("[-T:]", "", filterValueset)))%>%
mutate(filterValueset = across(filterValueset, ~ gsub("/", "--", .)))
